{"/home/travis/build/npmtest/node-npmtest-monk/test.js":"/* istanbul instrument in package npmtest_monk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-monk/lib.npmtest_monk.js":"/* istanbul instrument in package npmtest_monk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_monk = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_monk = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-monk/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-monk && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_monk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_monk\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_monk.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_monk.rollup.js'] =\n            local.assetsDict['/assets.npmtest_monk.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_monk.__dirname + '/lib.npmtest_monk.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-monk/node_modules/monk/lib/monk.js":"\n/*\n * Module exports\n */\n\nmodule.exports = exports = require('./manager')\n\n/*\n * Expose Collection\n */\n\nexports.Collection = require('./collection')\n\n/*\n * Expose util\n */\n\nexports.util = require('./util')\n\n/*\n * Expose helpers at the top level\n */\n\nvar helpers = require('./helpers')\n\nfor (var key in helpers) {\n  exports[key] = helpers[key]\n}\n","/home/travis/build/npmtest/node-npmtest-monk/node_modules/monk/lib/manager.js":"/*\n * Module dependencies.\n */\n\nvar mongo = require('mongodb')\nvar Debug = require('debug')\nvar monkDebug = Debug('monk:manager')\nvar Collection = require('./collection')\nvar ObjectId = mongo.ObjectID\nvar MongoClient = mongo.MongoClient\nvar Logger = mongo.Logger\nvar EventEmitter = require('events').EventEmitter\nvar inherits = require('util').inherits\n\n/*\n * Logger\n */\nLogger.setCurrentLogger(function (msg, context) {\n  if (context.type === 'error') {\n    return console.error(msg)\n  }\n  var logger = Debug('mongo:' + context.className)\n  logger.log = console.log.bind(console)\n  logger(context.type.toUpperCase() + ': ' + context.message)\n})\nLogger.setLevel('debug') // set the level to `debug` so we have everything going through debug\n\nvar STATE = {\n  CLOSED: 'closed',\n  OPENING: 'opening',\n  OPEN: 'open'\n}\n\n/*\n * Module exports.\n */\n\nmodule.exports = Manager\n\n/**\n * Monk constructor.\n *\n * @param {Array|String} uri replica sets can be an array or\n * comma-separated\n * @param {Object|Function} opts or connect callback\n * @param {Function} fn connect callback\n * @return {Promise} resolve when the connection is opened\n */\n\nfunction Manager (uri, opts, fn) {\n  if (!uri) {\n    throw Error('No connection URI provided.')\n  }\n\n  if (!(this instanceof Manager)) {\n    return new Manager(uri, opts, fn)\n  }\n\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  opts = opts || {}\n\n  if (Array.isArray(uri)) {\n    if (!opts.database) {\n      for (var i = 0, l = uri.length; i < l; i++) {\n        if (!opts.database) {\n          opts.database = uri[i].replace(/([^\\/])+\\/?/, '')\n        }\n        uri[i] = uri[i].replace(/\\/.*/, '')\n      }\n    }\n    uri = uri.join(',') + '/' + opts.database\n    monkDebug('repl set connection \"%j\" to database \"%s\"', uri, opts.database)\n  }\n\n  if (typeof uri === 'string') {\n    if (!/^mongodb:\\/\\//.test(uri)) {\n      uri = 'mongodb://' + uri\n    }\n  }\n\n  this._state = STATE.OPENING\n\n  this._queue = []\n  this.on('open', function (db) {\n    monkDebug('connection opened')\n    monkDebug('emptying queries queue (%s to go)', this._queue.length)\n    this._queue.forEach(function (cb) {\n      cb(db)\n    })\n  }.bind(this))\n\n  this._connectionURI = uri\n  this._connectionOptions = opts\n\n  this.open(uri, opts, fn && function (err) {\n    fn(err, this)\n  }.bind(this))\n\n  this.helper = {\n    id: ObjectId\n  }\n\n  this.collections = {}\n  this.options = { safe: true }\n\n  this.open = this.open.bind(this)\n  this.close = this.close.bind(this)\n  this.executeWhenOpened = this.executeWhenOpened.bind(this)\n  this.collection = this.col = this.get = this.get.bind(this)\n  this.oid = this.id\n}\n\n/*\n * Inherits from EventEmitter.\n */\n\ninherits(Manager, EventEmitter)\n\n/**\n * Open the connection\n * @private\n */\nManager.prototype.open = function (uri, opts, fn) {\n  MongoClient.connect(uri, opts, function (err, db) {\n    if (err || !db) {\n      this._state = STATE.CLOSED\n      this.emit('error-opening', err)\n    } else {\n      this._state = STATE.OPEN\n      this._db = db\n      this.emit('open', db)\n    }\n    if (fn) {\n      fn(err, this)\n    }\n  }.bind(this))\n}\n\n/**\n * Execute when connection opened.\n * @private\n */\n\nManager.prototype.executeWhenOpened = function () {\n  switch (this._state) {\n    case STATE.OPEN:\n      return Promise.resolve(this._db)\n    case STATE.OPENING:\n      return new Promise(function (resolve) {\n        this._queue.push(resolve)\n      }.bind(this))\n    case STATE.CLOSED:\n    default:\n      return new Promise(function (resolve) {\n        this._queue.push(resolve)\n        this.open(this._connectionURI, this._connectionOptions)\n      }.bind(this))\n  }\n}\n\n/**\n * Then\n *\n * @param {Function} [fn] - callback\n */\n\nManager.prototype.then = function (fn) {\n  return new Promise(function (resolve, reject) {\n    this.once('open', resolve)\n    this.once('error-opening', reject)\n  }.bind(this)).then(fn.bind(null, this))\n}\n\n/**\n * Catch\n *\n * @param {Function} [fn] - callback\n */\n\nManager.prototype.catch = function (fn) {\n  return new Promise(function (resolve) {\n    this.once('error-opening', resolve)\n  }.bind(this)).then(fn.bind(null))\n}\n\n/**\n * Closes the connection.\n *\n * @param {Boolean} [force] - Force close, emitting no events\n * @param {Function} [fn] - callback\n * @return {Promise}\n */\n\nManager.prototype.close = function (force, fn) {\n  if (typeof force === 'function') {\n    fn = force\n    force = false\n  }\n\n  var self = this\n  function close (resolve, db) {\n    db.close(force, function () {\n      self._state = STATE.CLOSED\n      self.emit('close')\n      if (fn) {\n        fn()\n      }\n      resolve()\n    })\n  }\n\n  switch (this._state) {\n    case STATE.CLOSED:\n      if (fn) {\n        fn()\n      }\n      return Promise.resolve()\n    case STATE.OPENING:\n      return new Promise(function (resolve) {\n        self._queue.push(function (db) {\n          close(resolve, db)\n        })\n      })\n    case STATE.OPEN:\n    default:\n      return new Promise(function (resolve) {\n        close(resolve, self._db)\n      })\n  }\n}\n\n/**\n * Gets a collection.\n *\n * @param {String} name - name of the mongo collection\n * @param {Object} [options] - options to pass to the collection\n * @return {Collection} collection to query against\n */\n\nManager.prototype.get = function (name, options) {\n  if ((options || {}).cache === false || !this.collections[name]) {\n    this.collections[name] = new Collection(this, name, options)\n  }\n\n  return this.collections[name]\n}\n\n/**\n * Create a collection.\n *\n * @param {String} name - name of the mongo collection\n * @param {Object} [creationOptions] - options used when creating the collection\n * @param {Object} [options] - options to pass to the collection\n * @return {Collection} collection to query against\n */\n\nManager.prototype.create = function (name, creationOptions, options) {\n  this.executeWhenOpened().then(function (db) {\n    db.createCollection(name, creationOptions)\n  }).catch(function (err) {\n    this.emit('error', err)\n  })\n\n  if ((options || {}).cache === false || !this.collections[name]) {\n    this.collections[name] = new Collection(this, name, options)\n  }\n\n  return this.collections[name]\n}\n\n/**\n * @deprecated\n */\n\nManager.prototype.id = function (str) {\n  console.warn('DEPRECATED (manager.id): use monk.id instead (see https://Automattic.github.io/monk/docs/id.html)')\n  return require('./helpers').id(str)\n}\n","/home/travis/build/npmtest/node-npmtest-monk/node_modules/monk/lib/collection.js":"/*\n * Module dependencies.\n */\n\nvar util = require('./util')\nvar debug = require('debug')('monk:queries')\n\nfunction thenFn (fn) {\n  return function (res) {\n    if (fn && typeof fn === 'function') {\n      fn(null, res)\n    }\n    return res\n  }\n}\n\nfunction catchFn (fn) {\n  return function (err) {\n    if (fn && typeof fn === 'function') {\n      return fn(err)\n    }\n    throw err\n  }\n}\n\n/*\n * Module exports\n */\n\nmodule.exports = Collection\n\n/**\n * Mongo Collection.\n *\n */\n\nfunction Collection (manager, name, options) {\n  this.manager = manager\n  this.name = name\n  this.options = options || {}\n\n  delete this.options.cache\n\n  this.oid = this.id\n  this.opts = this.opts.bind(this)\n  this.index = this.ensureIndex = this.ensureIndex.bind(this)\n  this.dropIndex = this.dropIndex.bind(this)\n  this.indexes = this.indexes.bind(this)\n  this.dropIndexes = this.dropIndexes.bind(this)\n  this.update = this.update.bind(this)\n  this.updateById = this.updateById.bind(this)\n  this.remove = this.remove.bind(this)\n  this.removeById = this.removeById.bind(this)\n  this.findAndModify = this.findAndModify.bind(this)\n  this.findOneAndUpdate = this.findOneAndUpdate.bind(this)\n  this.findOneAndDelete = this.findOneAndDelete.bind(this)\n  this.insert = this.insert.bind(this)\n  this.findById = this.findById.bind(this)\n  this.find = this.find.bind(this)\n  this.distinct = this.distinct.bind(this)\n  this.count = this.count.bind(this)\n  this.findOne = this.findOne.bind(this)\n  this.aggregate = this.aggregate.bind(this)\n  this.drop = this.drop.bind(this)\n  util.cast = util.cast.bind(this)\n  this.executeWhenOpened = this.executeWhenOpened.bind(this)\n}\n\n/**\n * Execute when connection opened.\n * @private\n */\n\nCollection.prototype.executeWhenOpened = function (fn) {\n  return this.manager.executeWhenOpened().then(function (db) {\n    return db.collection(this.name)\n  }.bind(this))\n}\n\n/**\n * Opts utility.\n * @private\n */\n\nCollection.prototype.opts = function (opts) {\n  opts = util.options(opts || {})\n\n  for (var i in this.manager.options) {\n    if (!(i in opts) && !(i in this.options)) {\n      opts[i] = this.manager.options[i]\n    }\n  }\n\n  for (var j in this.options) {\n    if (!(j in opts)) {\n      opts[j] = this.options[j]\n    }\n  }\n\n  return opts\n}\n\n/**\n * Calculates aggregate values for the data in a collection.\n *\n * @param {Array} pipeline - A sequence of data aggregation operations or stages.\n * @param {Object|Function} [opts]\n * @param {Function} [fn]\n * @return {Promise}\n */\n\nCollection.prototype.aggregate = function (stages, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  // opts\n  opts = this.opts(opts)\n\n  // query\n  debug('%s aggregate %j', this.name, stages)\n  return this.executeWhenOpened().then(function (col) {\n    return col.aggregate(stages, opts)\n  }).then(function (cursor) {\n    return cursor.toArray()\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * Perform a bulkWrite operation without a fluent API\n *\n * http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#bulkWrite\n *\n * @param {Array} operations - Bulk operations to perform.\n * @param {Object} [opts] options\n * @param {Function} [fn] callback\n * @return {Promise}\n */\n\nCollection.prototype.bulkWrite = function (operations, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  opts = this.opts(opts)\n\n  // cast\n  if (opts.castIds !== false) {\n    operations = util.cast(operations)\n  }\n\n  // query\n  debug('%s bulkWrite %j', this.name, operations)\n  return this.executeWhenOpened().then(function (col) {\n    return col.bulkWrite(operations, opts)\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * Returns the count of documents that would match a find() query. The db.collection.count() method does not perform the find() operation but instead counts and returns the number of results that match a query.\n *\n * @param {Object} query - The query selection criteria.\n * @param {Object} [opts] - Extra options for modifying the count.\n * @param {Function} [fn] - completion callback.\n * @return {Promise}\n */\n\nCollection.prototype.count = function (query, opts, fn) {\n  query = util.query(query)\n\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  // opts\n  opts = this.opts(opts)\n\n  // cast\n  if (opts.castIds !== false) {\n    query = util.cast(query)\n  }\n\n  // query\n  debug('%s count %j', this.name, query)\n  return this.executeWhenOpened().then(function (col) {\n    return col.count(query, opts)\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * Finds the distinct values for a specified field across a single collection and returns the results in an array.\n *\n * @param {String} field - The field for which to return distinct values.\n * @param {Object} [query] - A query that specifies the documents from which to retrieve the distinct values.\n * @param {Object} [opts] - options\n * @param {Function} [fn] completion callback\n * @return {Promise}\n */\n\nCollection.prototype.distinct = function (field, query, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  if (typeof query === 'function') {\n    fn = query\n    query = {}\n  }\n\n  query = util.query(query)\n\n  // opts\n  opts = this.opts(opts)\n\n  // cast\n  if (opts.castIds !== false) {\n    query = util.cast(query)\n  }\n\n  // query\n  debug('%s distinct %s (%j)', this.name, field, query)\n  return this.executeWhenOpened().then(function (col) {\n    return col.distinct(field, query, opts)\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * Removes a collection from the database. The method also removes any indexes associated with the dropped collection.\n *\n * @param {Function} [fn] callback\n * @return {Promise}\n */\n\nCollection.prototype.drop = function (fn) {\n  debug('%s drop', this.name)\n  return this.executeWhenOpened().then(function (col) {\n    return col.drop()\n  }).catch(function (err) {\n    if (err && err.message === 'ns not found') {\n      return 'ns not found'\n    } else {\n      throw err\n    }\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * Drops or removes the specified index or indexes from a collection.\n *\n * https://docs.mongodb.com/manual/reference/method/db.collection.dropIndex/\n *\n * @param {Object|String|Array} fields\n * @param {Object} [opts]\n * @param {Function} [fn] callback\n * @return {Promise}\n */\n\nCollection.prototype.dropIndex = function (fields, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  fields = util.fields(fields)\n  opts = this.opts(opts)\n\n  // query\n  debug('%s dropIndex %j (%j)', this.name, fields, opts)\n  return this.executeWhenOpened().then(function (col) {\n    return col.dropIndex(fields, opts)\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * Drops all indexes other than the required index on the _id field.\n *\n * https://docs.mongodb.com/manual/reference/method/db.collection.dropIndexes/\n *\n * @param {Function} [fn] callback\n *\n * @example\n *\n * users.dropIndexes()\n * @return {Promise}\n */\n\nCollection.prototype.dropIndexes = function (fn) {\n  // query\n  debug('%s dropIndexes', this.name)\n  return this.executeWhenOpened().then(function (col) {\n    return col.dropIndexes()\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * Creates indexes on collections.\n *\n * https://docs.mongodb.com/manual/reference/method/db.collection.ensureIndex/\n *\n * @param {Object|String|Array} fields\n * @param {Object} [opts] options\n * @param {Function} [fn] callback\n *\n * @example\n *\n * users.index('name.first')\n * users.index('name last')\n * users.index(['nombre', 'apellido'])\n * users.index({ up: 1, down: -1 })\n * users.index({ woot: 1 }, { unique: true })\n * @return {Promise}\n */\n\nCollection.prototype.ensureIndex = function (fields, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  fields = util.fields(fields)\n\n  // query\n  debug('%s ensureIndex %j (%j)', this.name, fields, opts)\n  return this.executeWhenOpened().then(function (col) {\n    return col.ensureIndex(fields, opts)\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * Selects documents in a collection and return them.\n *\n * @param {String|Object|ObjectId} query\n * @param {Object|String|Array} [opts] options or fields\n * @param {Function} [fn] completion callback\n * @return {Promise}\n */\n\nCollection.prototype.find = function (query, opts, fn) {\n  query = util.query(query)\n\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  // opts\n  opts = this.opts(opts)\n\n  // cast\n  if (opts.castIds !== false) {\n    query = util.cast(query)\n  }\n\n  // query\n  debug('%s find %j', this.name, query)\n\n  if (opts.rawCursor) {\n    delete opts.rawCursor\n    return this.executeWhenOpened().then(function (col) {\n      return col.find(query, opts)\n    }).then(thenFn(fn)).catch(catchFn(fn))\n  }\n\n  var promise = this.executeWhenOpened().then(function (col) {\n    return col.find(query, opts)\n  }).then(function (cursor) {\n    if (!opts.stream && !promise.eachListener) {\n      return cursor.toArray().then(thenFn(fn)).catch(catchFn(fn))\n    }\n\n    if (typeof opts.stream === 'function') {\n      promise.eachListener = opts.stream\n    }\n\n    var didClose = false\n    var didFinish = false\n    var processing = 0\n\n    function close () {\n      didClose = true\n      processing -= 1\n      cursor.close()\n    }\n\n    function pause () {\n      processing += 1\n      cursor.pause()\n    }\n\n    return new Promise(function (resolve, reject) {\n      cursor.on('data', function (doc) {\n        if (!didClose) {\n          promise.eachListener(doc, {\n            close: close,\n            pause: pause,\n            resume: resume\n          })\n        }\n      })\n\n      function resume () {\n        processing -= 1\n        cursor.resume()\n        if (processing === 0 && didFinish) {\n          done()\n        }\n      }\n\n      function done () {\n        didFinish = true\n        if (processing <= 0) {\n          if (fn) {\n            fn()\n          }\n          resolve()\n        }\n      }\n\n      cursor.on('close', done)\n      cursor.on('end', done)\n\n      cursor.on('error', function (err) {\n        if (fn) {\n          fn(err)\n        }\n        reject(err)\n      })\n    })\n  })\n\n  promise.each = function (eachListener) {\n    promise.eachListener = eachListener\n    return promise\n  }\n\n  return promise\n}\n\n/**\n * @deprecated\n * Modifies and returns a single document. By default, the returned document does not include the modifications made on the update. To return the document with the modifications made on the update, use the `new` option.\n *\n * @param {Object} search query, or { query, update } object\n * @param {Object} [update] object\n * @param {Object|String|Array} [opts] options or fields\n * @param {Function} [fn] callback\n *\n * @example\n *\n * users.findAndModify({ name: 'Mathieu' }, { $set: { foo: 'bar' } }, opts)\n * users.findAndModify({ query: { name: 'Mathieu' }, update: { $set: { foo: 'bar' } }}, opts)\n * @return {Promise}\n */\n\nCollection.prototype.findAndModify = function (query, update, opts, fn) {\n  query = query || {}\n\n  if (typeof query.query !== 'object' && typeof query.update !== 'object') {\n    query = {\n      query: query,\n      update: update\n    }\n  } else {\n    fn = opts\n    opts = update\n  }\n\n  query.query = util.query(query.query)\n\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  opts = this.opts(opts)\n\n  if (opts.remove) {\n    console.warn('DEPRECATED (collection.findAndModify): use collection.findOneAndDelete instead (see https://Automattic.github.io/monk/docs/collection/findOneAndDelete.html)')\n  } else {\n    console.warn('DEPRECATED (collection.findAndModify): use collection.findOneAndUpdate instead (see https://Automattic.github.io/monk/docs/collection/findOneAndUpdate.html)')\n  }\n\n  // `new` defaults to `true` for upserts\n  if (opts.new == null && opts.upsert) {\n    opts.new = true\n  }\n\n  // cast\n  if (opts.castIds !== false) {\n    query.query = util.cast(query.query)\n    query.update = util.cast(query.update)\n  }\n\n  // query\n  debug('%s findAndModify %j with %j', this.name, query.query, query.update)\n  return this.executeWhenOpened().then(function (col) {\n    return col.findAndModify(\n      query.query,\n      [],\n      query.update,\n      opts\n    )\n  }).then(function (doc) {\n    return doc && doc.value || doc\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * Returns one document that satisfies the specified query criteria. If multiple documents satisfy the query, this method returns the first document according to the natural order which reflects the order of documents on the disk. In capped collections, natural order is the same as insertion order. If no document satisfies the query, the method returns null.\n *\n * https://docs.mongodb.com/manual/reference/method/db.collection.findOne/\n *\n * @param {String|ObjectId|Object} query\n * @param {Object} [opts] - options\n * @param {Function} [fn] - completion callback\n *\n * @example\n *\n * users.findOne({name: 'foo'}).then((doc) => {})\n * @return {Promise}\n */\n\nCollection.prototype.findOne = function (query, opts, fn) {\n  query = util.query(query)\n\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  // opts\n  opts = this.opts(opts)\n\n  // cast\n  if (opts.castIds !== false) {\n    query = util.cast(query)\n  }\n\n  // query\n  debug('%s findOne %j', this.name, query)\n  return this.executeWhenOpened().then(function (col) {\n    return col.find(query, opts).limit(1).toArray()\n  }).then(function (docs) {\n    return docs && docs[0] || null\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * @deprecated\n * findOne by ID helper\n *\n * @see findOne\n *\n * @param {String} hex id\n * @param {Object|String|Array} [opts] options or fields\n * @param {Function} [fn] completion callback\n * @return {Promise}\n */\n\nCollection.prototype.findById = function (id, opts, fn) {\n  console.warn('DEPRECATED (collection.findById): use collection.findOne instead (see https://Automattic.github.io/monk/docs/collection/findOne.html)')\n  return this.findOne({ _id: id }, opts, fn)\n}\n\n/**\n * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n *\n * http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findOneAndDelete\n *\n * @param {String|Object|ObjectId} query\n * @param {Object|String|Array} [opts] options or fields\n * @param {Function} [fn] callback\n * @return {Promise}\n */\n\nCollection.prototype.findOneAndDelete = function (query, opts, fn) {\n  query = util.query(query)\n\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  opts = this.opts(opts)\n\n  // cast\n  if (opts.castIds !== false) {\n    query = util.cast(query)\n  }\n\n  // query\n  debug('%s findOneAndDelete %j with %j', this.name, query)\n  return this.executeWhenOpened().then(function (col) {\n    return col.findOneAndDelete(query, opts)\n  }).then(function (doc) {\n    return doc && doc.value || doc\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n *\n * http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findOneAndUpdate\n *\n * @param {String|Object|ObjectId} query\n * @param {Object} update\n * @param {Object|String|Array} [opts] options or fields\n * @param {Function} [fn] callback\n *\n * @example\n *\n * users.findOneAndUpdate({ name: 'Mathieu' }, opts)\n * users.findOneAndUpdate({ query: { name: 'Mathieu' }, opts)\n * @return {Promise}\n */\n\nCollection.prototype.findOneAndUpdate = function (query, update, opts, fn) {\n  query = util.query(query)\n\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  opts = this.opts(opts)\n\n  if (typeof opts.returnOriginal === 'undefined') {\n    opts.returnOriginal = false\n  }\n\n  // cast\n  if (opts.castIds !== false) {\n    query = util.cast(query)\n  }\n\n  // query\n  debug('%s findOneAndUpdate %j with %j', this.name, query, update)\n  return this.executeWhenOpened().then(function (col) {\n    return col.findOneAndUpdate(query, update, opts)\n  }).then(function (doc) {\n    return doc && doc.value || doc\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * Run a group command across a collection\n *\n * http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#group\n *\n * @param {object | array | function} keys - An object, array or function expressing the keys to group by.\n * @param {Object} condition - An optional condition that must be true for a row to be considered.\n * @param {Object} initial - Initial value of the aggregation counter object.\n * @param {Function} reduce - The reduce function aggregates (reduces) the objects iterated.\n * @param {Function} [finalize] An optional function to be run on each item in the result set just before the item is returned.\n * @param {boolean} [command] Specify if you wish to run using the internal group command or using eval, default is true.\n * @param {Object} [opts] options\n * @param {Function} [fn] callback\n *\n * @example\n *\n * users.findOneAndUpdate({ name: 'Mathieu' }, opts)\n * users.findOneAndUpdate({ query: { name: 'Mathieu' }, opts)\n * @return {Promise}\n */\n\nCollection.prototype.group = function (keys, condition, initial, reduce, finalize, command, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  opts = this.opts(opts)\n\n  // query\n  debug('%s group %j with %j', this.name, keys, condition)\n  return this.executeWhenOpened().then(function (col) {\n    return col.group(keys, condition, initial, reduce, finalize, command, opts)\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * Returns an array that holds a list of documents that identify and describe the existing indexes on the collection.\n *\n * https://docs.mongodb.com/manual/reference/method/db.collection.getIndexes/\n *\n * @param {Function} [fn] callback\n * @return {Promise}\n */\n\nCollection.prototype.indexes = function (fn) {\n  debug('%s indexInformation', this.name)\n  return this.executeWhenOpened().then(function (col) {\n    return col.indexInformation()\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * Inserts a document or documents into a collection.\n *\n * https://docs.mongodb.com/manual/reference/method/db.collection.insert/\n *\n * @param {Object|Array} data\n * @param {Object} [opts] options\n * @param {Function} [fn] callback\n *\n * @example\n *\n * users.insert({ woot: 'foo' })\n * users.insert([{ woot: 'bar' }, { woot: 'baz' }])\n * @return {Promise}\n */\n\nCollection.prototype.insert = function (data, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  opts = this.opts(opts)\n\n  var arrayInsert = Array.isArray(data)\n\n  if (arrayInsert && data.length === 0) {\n    debug('%s inserting empty array in %j', this.name)\n    return Promise.resolve([])\n  }\n\n  // cast\n  if (opts.castIds !== false) {\n    data = util.cast(data)\n  }\n\n  // query\n  debug('%s insert %j', this.name, data)\n  return this.executeWhenOpened().then(function (col) {\n    return col.insert(data, opts)\n  }).then(function (docs) {\n    var res = (docs || {}).ops\n    if (res && !arrayInsert) {\n      res = docs.ops[0]\n    }\n    return res\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * Removes documents from a collection.\n *\n * https://docs.mongodb.com/manual/reference/method/db.collection.remove/\n *\n * @param {Object|ObjectId|String} search query\n * @param {Object} [opts]  options\n * @param {Function} [fn] callback\n *\n * @example\n *\n * users.remove({ name: 'Mathieu' })\n * @return {Promise}\n */\n\nCollection.prototype.remove = function (query, opts, fn) {\n  query = util.query(query)\n\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  opts = this.opts(opts)\n\n  // cast\n  if (opts.castIds !== false) {\n    query = util.cast(query)\n  }\n\n  // query\n  debug('%s remove %j with %j', this.name, query, opts)\n  return this.executeWhenOpened().then(function (col) {\n    return col.remove(query, opts)\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * @deprecated\n * remove by ID helper\n * @see remove\n *\n * @param {String} hex id\n * @param {Object} [opts]  options\n * @param {Function} [fn] callback\n *\n * @example\n *\n * users.removeById(id)\n * @return {Promise}\n */\n\nCollection.prototype.removeById = function (id, opts, fn) {\n  console.warn('DEPRECATED (collection.removeById): use collection.remove instead (see https://Automattic.github.io/monk/docs/collection/remove.html)')\n  return this.remove({ _id: id }, opts, fn)\n}\n\n/**\n * Modifies an existing document or documents in a collection. The method can modify specific fields of an existing document or documents or replace an existing document entirely, depending on the update parameter. By default, the update() method updates a single document. Set the `multi` option to update all documents that match the query criteria.\n *\n * https://docs.mongodb.com/manual/reference/method/db.collection.update/\n *\n * @param {Object} query\n * @param {Object} update obj\n * @param {Object|String|Array} [opts], options or fields\n * @param {Function} [fn] callback\n *\n * @example\n *\n * users.update({ name: 'Mathieu' }, { $set: { foo: 'bar' } })\n * @return {Promise}\n */\n\nCollection.prototype.update = function (query, update, opts, fn) {\n  query = util.query(query)\n\n  if (typeof opts === 'function') {\n    fn = opts\n    opts = {}\n  }\n\n  opts = this.opts(opts)\n\n  // cast\n  if (opts.castIds !== false) {\n    query = util.cast(query)\n    update = util.cast(update)\n  }\n\n  // query\n  debug('%s update %j with %j', this.name, query, update)\n  return this.executeWhenOpened().then(function (col) {\n    return col.update(query, update, opts)\n  }).then(function (doc) {\n    return doc && doc.result || doc\n  }).then(thenFn(fn)).catch(catchFn(fn))\n}\n\n/**\n * @deprecated\n * update by id helper\n * @see update\n *\n * @param {String|Object} id - object id\n * @param {Object} update - update obj\n * @param {Object|String|Array} [opts] options or fields\n * @param {Function} [fn] callback\n *\n * @example\n *\n * users.updateById(id, { $set: { foo: 'bar' } })\n * @return {Promise}\n */\n\nCollection.prototype.updateById = function (id, update, opts, fn) {\n  console.warn('DEPRECATED (collection.updateById): use collection.update instead (see https://Automattic.github.io/monk/docs/collection/update.html)')\n  return this.update({ _id: id }, update, opts, fn)\n}\n\n/**\n * @deprecated\n */\n\nCollection.prototype.id = function (str) {\n  console.warn('DEPRECATED (collection.id): use monk.id instead (see https://Automattic.github.io/monk/docs/id.html)')\n  return require('./helpers').id(str)\n}\n","/home/travis/build/npmtest/node-npmtest-monk/node_modules/monk/lib/util.js":"var id = require('./helpers').id\n\n/**\n * Applies ObjectId casting to _id fields.\n *\n * @param {Object} optional, query\n * @return {Object} query\n * @private\n */\n\nexports.cast = function cast (obj) {\n  if (Array.isArray(obj)) {\n    return obj.map(cast)\n  }\n\n  if (obj && typeof obj === 'object') {\n    Object.keys(obj).forEach(function (k) {\n      if (k === '_id' && obj._id) {\n        if (obj._id.$in) {\n          obj._id.$in = obj._id.$in.map(id)\n        } else if (obj._id.$nin) {\n          obj._id.$nin = obj._id.$nin.map(id)\n        } else if (obj._id.$ne) {\n          obj._id.$ne = id(obj._id.$ne)\n        } else {\n          obj._id = id(obj._id)\n        }\n      } else {\n        obj[k] = cast(obj[k])\n      }\n    })\n  }\n\n  return obj\n}\n\n/**\n * Check if the query is an id and if so, transform it to a proper query\n *\n * @param {String|ObjectId|Object} query\n * @return {Object} query\n * @private\n */\n\nexports.query = function (query) {\n  query = query || {}\n\n  if (typeof query === 'string' || typeof query.toHexString === 'function') {\n    return {_id: query}\n  }\n\n  return query\n}\n\n/**\n * Parses all the possible ways of expressing fields.\n *\n * @param {String|Object|Array} fields\n * @param {number} number when -\n * @return {Object} fields in object format\n * @private\n */\n\nexports.fields = function (obj, numberWhenMinus) {\n  if (!Array.isArray(obj) && typeof obj === 'object') {\n    return obj\n  }\n\n  var fields = {}\n  obj = typeof obj === 'string' ? obj.split(' ') : (obj || [])\n\n  for (var i = 0, l = obj.length; i < l; i++) {\n    if (obj[i][0] === '-') {\n      fields[obj[i].substr(1)] = numberWhenMinus\n    } else {\n      fields[obj[i]] = 1\n    }\n  }\n\n  return fields\n}\n\n/**\n * Parses an object format.\n *\n * @param {String|Array|Object} fields or options\n * @return {Object} options\n * @private\n */\n\nexports.options = function (opts) {\n  if (typeof opts === 'string' || Array.isArray(opts)) {\n    return { fields: exports.fields(opts) }\n  }\n  opts = opts || {}\n  opts.fields = exports.fields(opts.fields, 0)\n  opts.sort = exports.fields(opts.sort, -1)\n  return opts\n}\n","/home/travis/build/npmtest/node-npmtest-monk/node_modules/monk/lib/helpers.js":"var ObjectId = require('mongodb').ObjectID\n\n/**\n * Casts to objectid\n *\n * @param {Mixed} str - hex id or ObjectId\n * @return {ObjectId}\n * @api public\n */\n\nexports.id = function (str) {\n  if (str == null) return ObjectId()\n  return typeof str === 'string' ? ObjectId.createFromHexString(str) : str\n}\n"}